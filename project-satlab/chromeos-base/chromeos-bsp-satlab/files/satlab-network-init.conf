# Copyright (c) 2014 The Chromium OS Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

description   "Configure network bridge and disable wlan0 for moblab"
author        "chromium-os-dev@chromium.org"

start on started network-services

task

normal exit 0

script
  mkdir -p /var/log/bootup/
  exec >>/var/log/bootup/${UPSTART_JOB}.log 2>&1
  set -x
  set -e
  logger -t "$UPSTART_JOB" "Starting."

  SERVER_ADDRESS=192.168.231.1
  SERVER_NETMASK=255.255.255.0
  INTERFACE_WAN='WAN'
  INTERFACE_LAN='LAN'

  # Normal case, one interface connected to a network that should have
  # access to google, that interface should have an IP address.
  # The other interface has the DUT's connected, no DHCP server has been
  # started yet so no IP address on that interface.
  find_network_interfaces_by_ip_addr() {
    INT_IFACE=""
    EXT_IFACE=""
    logger -t "${UPSTART_JOB}" "Finding interfaces by ip address"
    local node
    local server_net_prefix=$( echo "${SERVER_ADDRESS}" |
                               awk -F '.' '{print $1 $2 $3}' )
    for node in "$@"; do
      local inet_addr=$( ip addr show $node |
                         grep "inet\b" |
                         awk '{print $2}' |
                         cut -d/ -f1 )
      if [ -z "${inet_addr}" ]; then
        if [ -z ${INT_IFACE} ]; then
          INT_IFACE=$node
        fi
      else
        # Exclude the dhcp server subnet from being the external interface
        local net_prefix=$( echo "${inet_addr}" |
                            awk -F '.' '{print $1 $2 $3}' )
        if [ "${net_prefix}" != "${server_net_prefix}" ]; then
          if [ -z ${EXT_IFACE} ]; then
            EXT_IFACE=$node
          else
            logger -t "${UPSTART_JOB}" "Multiple interfaces meet the criteria \
              for External interface, please check wiring connections, only one\
              network cable to internet required."
          fi
        fi
      fi
    done
  }

  find_network_interfaces() {
    # Find which network interfaces is connected to the WAN.
    EXT_IFACE=""
    INT_IFACE=""
    local count=0
    find_network_interfaces_by_ip_addr $@
    until  [ ! -z "${EXT_IFACE}" ] && [ ! -z ${INT_IFACE} ] ||
           [ ${count} -gt 5 ]; do
      count=$(($count+1))
      sleep 10
      find_network_interfaces_by_ip_addr $@
    done
    logger -t "${UPSTART_JOB}" "External ${EXT_IFACE} Internal ${INT_IFACE}"
  }

  wait_for_interface() {
    # Check the interface existence for 5 mins after boot.
    # Taking one parameter as the interface name - either 'built-in' or 'USB'
    local reps=0
    while [ ${reps} -lt 300 ]; do
      find_network_interfaces eth0 eth1
      local intf
      case "$1" in
        ${INTERFACE_WAN}) intf=${EXT_IFACE}
          ;;
        ${INTERFACE_LAN}) intf=${INT_IFACE}
          ;;
       *) logger -t "${UPSTART_JOB}" "Illegal network interface $1"
          break
          ;;
      esac
      if [ -n "${intf}" ]; then
        logger -t "${UPSTART_JOB}" "Found $1 Ethernet interface ${intf}."
        break
      fi
      if [ $((reps % 30)) -eq 0 ]; then
        logger -t "${UPSTART_JOB}" \
          "Waiting for $1 Ethernet connection(${reps} secs)"
      fi
      : $((reps += 1))
      sleep 1
    done
  }

  set_up_forwarding() {
    echo 1 > /proc/sys/net/ipv4/ip_forward
    logger -t "${UPSTART_JOB}" "Configuring NAT Service."
    iptables -t nat -A POSTROUTING -o ${EXT_IFACE} -j MASQUERADE
    iptables -A FORWARD -i ${EXT_IFACE} -o ${INT_IFACE} -m state \
      --state RELATED,ESTABLISHED -j ACCEPT
    iptables -A FORWARD -i ${INT_IFACE} -o ${EXT_IFACE} -j ACCEPT
    iptables -P FORWARD ACCEPT
    logger -t "${UPSTART_JOB}" "Enabling IP forwarding"
  }

  # Step 1 - make sure the built-in external interface exists.
  wait_for_interface ${INTERFACE_WAN}
  if [ -z "${EXT_IFACE}" ]; then
    logger -t "${UPSTART_JOB}" "No Internet connection on eth0 or eth1."
    exit 0
  fi

  # Step 2 - configure server IP address with ${SERVER_ADDRESS}.
  logger -t "${UPSTART_JOB}" "setting server IP address to ${SERVER_ADDRESS}"
  ifconfig ${INT_IFACE} ${SERVER_ADDRESS} netmask ${SERVER_NETMASK} up

  # Step 3 - start the dhcpd server on Satlab.
  logger -t "${UPSTART_JOB}" "starting satlab-dhcpd-init"

  # Step 4 - set up routing between built-in external
  # network interface and the bridge.
  set_up_forwarding

  logger -t "$UPSTART_JOB" "Ending."
end script
